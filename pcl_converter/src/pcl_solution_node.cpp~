#include <headers.h>

ros::Publisher pub;

void cloud_cb (const sensor_msgs::PointCloud2ConstPtr& input)
{
  	//#######################################################################
  	//#### Read data and perform segmentation and ground plane removal
  	//#######################################################################
  	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>), cloud_f (new pcl::PointCloud<pcl::PointXYZ>);
  	pcl::fromROSMsg (*input, *cloud);
  	//std::cout << "PointCloud before filtering has: " << cloud->points.size () << " data points." << std::endl; //*

  	// Create the segmentation object for the planar model and set all the parameters
 	pcl::SACSegmentation<pcl::PointXYZ> seg;
  	pcl::PointIndices::Ptr inliers (new pcl::PointIndices);
  	pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);
  	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_plane (new pcl::PointCloud<pcl::PointXYZ> ());
  	pcl::PCDWriter writer;
  	seg.setOptimizeCoefficients (true);
  	seg.setModelType (pcl::SACMODEL_PLANE);
  	seg.setMethodType (pcl::SAC_RANSAC);
  	seg.setMaxIterations (100);
  	seg.setDistanceThreshold (0.3);

  	int i=0, nr_points = (int) cloud->points.size ();
  	while (cloud->points.size () > 0.3 * nr_points)
  	{
    	// Segment the largest planar component from the remaining cloud
    	seg.setInputCloud (cloud);
    	seg.segment (*inliers, *coefficients);
    	if (inliers->indices.size () == 0)
    	{
      		std::cout << "Could not estimate a planar model for the given dataset." << std::endl;
      	//break;
    	}

    	// Extract the planar inliers from the input cloud
    	pcl::ExtractIndices<pcl::PointXYZ> extract;
    	extract.setInputCloud (cloud);
    	extract.setIndices (inliers);
    	extract.setNegative (false);

    	// Get the points associated with the planar surface
    	extract.filter (*cloud_plane);
    	std::cout << "PointCloud representing the planar component: " << cloud_plane->points.size () << " data points." << std::endl;

    	// Remove the planar inliers, extract the rest
    	extract.setNegative (true);
    	extract.filter (*cloud_f);
    	*cloud = *cloud_f;
	}

  	//#######################################################################
  	//#### Do Euclidean cluster extraction
  	//#######################################################################

  	// Creating the KdTree object for the search method of the extraction
  	pcl::search::KdTree<pcl::PointXYZ>::Ptr tree (new pcl::search::KdTree<pcl::PointXYZ>);
  	tree->setInputCloud (cloud);

  	std::vector<pcl::PointIndices> cluster_indices;
  	pcl::EuclideanClusterExtraction<pcl::PointXYZ> ec;
  	ec.setClusterTolerance (0.5); // 50cm
  	ec.setMinClusterSize (10);
  	ec.setMaxClusterSize (25000);
  	ec.setSearchMethod (tree);
  	ec.setInputCloud (cloud);
  	ec.extract (cluster_indices);
  
  	// Prepare message
  	vision_msgs::Detection3DArray msgOut;
  	vision_msgs::Detection3D det;
  	msgOut.header = input->header;
  	Eigen::Vector4f centroid;


  	int j = 0;
  	for (std::vector<pcl::PointIndices>::const_iterator it = cluster_indices.begin (); it != cluster_indices.end (); ++it)
  	{
    	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_cluster (new pcl::PointCloud<pcl::PointXYZ>);
    	for (std::vector<int>::const_iterator pit = it->indices.begin (); pit != it->indices.end (); ++pit)
      	cloud_cluster->points.push_back (cloud->points[*pit]); //*
    	cloud_cluster->width = cloud_cluster->points.size ();
    	cloud_cluster->height = 1;
    	cloud_cluster->is_dense = true;

	// Extract centroid and min/max
    	pcl::compute3DCentroid (*cloud_cluster, centroid);
    	pcl::PointXYZ min_p, max_p;
    	pcl::getMinMax3D(*cloud_cluster, min_p, max_p);

  	det.bbox.center.position.x = centroid[0];
   	det.bbox.center.position.y = centroid[1];
   	det.bbox.center.position.z = centroid[2];
   	det.bbox.size.x = max_p.x-min_p.x;
   	det.bbox.size.y = max_p.y-min_p.y;
   	det.bbox.size.z = max_p.z-min_p.z;
	msgOut.detections.push_back(det);
//	msgOut.header.frame_id = 0;

    	std::cout << "PointCloud representing the Cluster: " << cloud_cluster->points.size () << " data points." << std::endl;
    	std::stringstream ss;
    	ss << "cloud_cluster_" << j << ".pcd";
    	//writer.write<pcl::PointXYZ> (ss, *cloud_cluster, false); //*ss.str ()
    	j++;
  }
	pub.publish(msgOut);
}

int main (int argc, char** argv)
{
	// Initialize ROS
	ros::init (argc, argv, "my_pcl_tutorial");
	ros::NodeHandle nh;

	// Create a ROS subscriber for the input point cloud
	ros::Subscriber sub = nh.subscribe ("/point_cloud", 1, cloud_cb);

	// Create a ROS publisher for the output point cloud
	pub = nh.advertise<vision_msgs::Detection3DArray> ("/pcl_solution_node/detections", 1);

	// Spin
	ros::spin ();
}

